############### Graphical Table
library(dplyr)
library(tidyr)
# Your original code
summary_MT11 <- all.counts %>%
filter(grepl("MYLT", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MT11 = mean(ratio_MT11, na.rm = TRUE)
)
# Your original code
summary_MT11 <- all.counts %>%
filter(grepl("MT11", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MT11 = mean(ratio_MT11, na.rm = TRUE)
)
# Read the Excel file
all.counts <- read_excel("/Users/rribeiro/_hcr-counts/all_counts.xlsx")
library(tidyr)
library(readxl)
############### Graphical Table
library(dplyr)
library(tidyr)
library(readxl)
# Read the Excel file
all.counts <- read_excel("/Users/rribeiro/_hcr-counts/all_counts.xlsx")
# Your original code
summary_MT11 <- all.counts %>%
filter(grepl("MT11", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MT11 = mean(ratio_MT11, na.rm = TRUE)
)
# Combine the columns 'HCR#' and 'IND'
wormID <- paste(all.counts$`HCR#`, all.counts$IND, all.counts$NSEGMENTS, sep = " ")
# You can then assign the combined column back to your dataframe or use it as needed
all.counts <- cbind(all.counts, wormID)
# Your original code
summary_MT11 <- all.counts %>%
filter(grepl("MT11", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MT11 = mean(ratio_MT11, na.rm = TRUE)
)
# You can then assign the combined column back to your dataframe or use it as needed
all.counts <- cbind(all.counts, wormID)
# Assuming your dataframe is named "all.counts"
# Calculate ratios of each column divided by '`VASA+`'
all.counts$ratio_MUCIN <- all.counts$`MUCIN+` / all.counts$`VASA+`
all.counts$ratio_13944 <- all.counts$`13944+` / all.counts$`VASA+`
all.counts$ratio_KCD21 <- all.counts$`KCD21+` / all.counts$`VASA+`
all.counts$ratio_STEN <- all.counts$`STEN+` / all.counts$`VASA+`
all.counts$ratio_3252 <- all.counts$`3252+` / all.counts$`VASA+`
# Read the Excel file
all.counts <- read_excel("/Users/rribeiro/_hcr-counts/all_counts.xlsx")
# Convert columns to numeric
all.counts$`DMRT+` <- as.numeric(all.counts$`DMRT+`)
all.counts$`13944+` <- as.numeric(all.counts$`13944+`)
all.counts$`MT11+` <- as.numeric(all.counts$`MT11+`)
all.counts$`MUCIN+` <- as.numeric(all.counts$`MUCIN+`)
all.counts$`LEUCIN+` <- as.numeric(all.counts$`LEUCIN+`)
all.counts$`VASA+` <- as.numeric(all.counts$`VASA+`)
all.counts$`PRMI+` <- as.numeric(all.counts$`PRMI+`)
all.counts$`3252+` <- as.numeric(all.counts$`3252+`)
all.counts$`KCD21+` <- as.numeric(all.counts$`KCD21+`)
all.counts$`STEN+` <- as.numeric(all.counts$`STEN+`)
# Combine the columns 'HCR#' and 'IND'
wormID <- paste(all.counts$`HCR#`, all.counts$IND, all.counts$NSEGMENTS, sep = " ")
# You can then assign the combined column back to your dataframe or use it as needed
all.counts <- cbind(all.counts, wormID)
# Assuming your dataframe is named "all.counts"
# Calculate ratios of each column divided by '`VASA+`'
all.counts$ratio_MUCIN <- all.counts$`MUCIN+` / all.counts$`VASA+`
all.counts$ratio_13944 <- all.counts$`13944+` / all.counts$`VASA+`
all.counts$ratio_KCD21 <- all.counts$`KCD21+` / all.counts$`VASA+`
all.counts$ratio_STEN <- all.counts$`STEN+` / all.counts$`VASA+`
all.counts$ratio_3252 <- all.counts$`3252+` / all.counts$`VASA+`
all.counts$ratio_MT11 <- all.counts$`MT11+` / all.counts$`VASA+`
all.counts$ratio_LEUCIN <- all.counts$`LEUCIN+` / all.counts$`VASA+`
all.counts$ratio_DMRT <- all.counts$`DMRT+` / all.counts$`VASA+`
all.counts$ratio_PRMI <- all.counts$`PRMI+` / all.counts$`VASA+`
#Save modified data
all.counts.modified <- all.counts
# Your original code
summary_MT11 <- all.counts %>%
filter(grepl("MT11", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MT11 = mean(ratio_MT11, na.rm = TRUE)
)
# Pivot the table
summary_pivoted_MT11 <- summary_MT11 %>%
pivot_wider(names_from = STRUCTURE, values_from = mean_ratio_MT11)
# Print the pivoted table
print(summary_pivoted_MT11)
# Write the summary to a CSV file
write.csv(summary_pivoted_MT11, "/Users/rribeiro/_hcr-counts/summary_MT11.csv", row.names = FALSE)
# Write the summary to a CSV file
write.csv(summary_pivoted_MT11, "/Users/rribeiro/_hcr-counts/summary_MT11_2.csv", row.names = FALSE)
#### Graphical table plot
library(ggplot2)
# Define colors for the graphical table
colors <- c("white" = "white", "grey" = "grey", "purple" = "purple")
# Define custom order for 'SEX' column
sex_order <- c("MALE", "FEMALE", "UNKNOWN")
# Create a function to assign colors based on values
assign_color <- function(value) {
ifelse(is.na(value), "white", ifelse(value == 0, "grey", "purple"))
}
# Apply the color function to each cell in the table
summary_pivoted_colors11 <- summary_pivoted_MT11
summary_pivoted_colors11[, -c(1, 2)] <- apply(summary_pivoted_colors11[, -c(1, 2)], 2, assign_color)
# Convert the data to long format for plotting
summary_pivoted_long11 <- tidyr::gather(summary_pivoted_colors11, key = "structure", value = "color", -wormID, -SEX)
# Arrange the data by 'SEX' in custom order
summary_pivoted_long11 <- summary_pivoted_long11[order(factor(summary_pivoted_long11$SEX, levels = sex_order)), ]
# Plot the graphical table with legend
ggplot(summary_pivoted_long11, aes(x = structure, y = wormID, fill = color)) +
geom_tile(color = "white") +
scale_fill_manual(values = colors, labels = c("Absent", "Present", "Not found")) +
labs(x = "Structure", y = "Worm ID", title = "Graphical Table of Mean Ratio MT11") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~SEX, scales = "free_y") +
guides(fill = guide_legend(title = "Color"))
# Your original code
summary_MUC <- all.counts %>%
filter(grepl("MUC", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MUC = mean(ratio_MUCIN, na.rm = TRUE)
)
# Pivot the table
summary_pivoted_MUC <- summary_MUC %>%
pivot_wider(names_from = STRUCTURE, values_from = mean_ratio_MUC)
# Print the pivoted table
print(summary_pivoted_MUC)
# Write the summary to a CSV file
write.csv(summary_pivoted_MUC, "/Users/rribeiro/_hcr-counts/summary_MUC.csv", row.names = FALSE)
# Your original code
summary_MUC <- all.counts %>%
filter(grepl("MUC", EXPERIMENT, ignore.case = TRUE)) %>%
group_by(wormID, SEX, STRUCTURE) %>%
summarize(
mean_ratio_MUC = mean(ratio_MUCIN, na.rm = TRUE)
)
# Pivot the table
summary_pivoted_MUC <- summary_MUC %>%
pivot_wider(names_from = STRUCTURE, values_from = mean_ratio_MUC)
# Print the pivoted table
print(summary_pivoted_MUC)
# Write the summary to a CSV file
write.csv(summary_pivoted_MUC, "/Users/rribeiro/_hcr-counts/summary_MUC.csv", row.names = FALSE)
#### Graphical table plot
library(ggplot2)
# Define colors for the graphical table
colors <- c("white" = "white", "grey" = "grey", "yellow2" = "yellow2")
# Define custom order for 'SEX' column
sex_order <- c("MALE", "FEMALE", "UNKNOWN")
# Create a function to assign colors based on values
assign_color <- function(value) {
ifelse(is.na(value), "white", ifelse(value == 0, "grey", "yellow2"))
}
# Apply the color function to each cell in the table
summary_pivoted_colors <- summary_pivoted_MUC
summary_pivoted_colors[, -c(1, 2)] <- apply(summary_pivoted_colors[, -c(1, 2)], 2, assign_color)
# Convert the data to long format for plotting
summary_pivoted_long <- tidyr::gather(summary_pivoted_colors, key = "structure", value = "color", -wormID, -SEX)
# Arrange the data by 'SEX' in custom order
summary_pivoted_long <- summary_pivoted_long[order(factor(summary_pivoted_long$SEX, levels = sex_order)), ]
# Plot the graphical table with legend
ggplot(summary_pivoted_long11, aes(x = structure, y = wormID, fill = color)) +
geom_tile(color = "white") +
scale_fill_manual(values = colors, labels = c("Absent", "Present", "Not found")) +
labs(x = "Structure", y = "Worm ID", title = "Graphical Table of Mean Ratio MUCIN") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~SEX, scales = "free_y") +
guides(fill = guide_legend(title = "Color"))
# Create a function to assign colors based on values
assign_color <- function(value) {
ifelse(is.na(value), "white", ifelse(value == 0, "grey", "yellow2"))
}
# Define colors for the graphical table
colors <- c("white" = "white", "grey" = "grey", "yellow2" = "yellow2")
# Define custom order for 'SEX' column
sex_order <- c("MALE", "FEMALE", "UNKNOWN")
# Create a function to assign colors based on values
assign_color <- function(value) {
ifelse(is.na(value), "white", ifelse(value == 0, "grey", "yellow2"))
}
# Apply the color function to each cell in the table
summary_pivoted_colors <- summary_pivoted_MUC
summary_pivoted_colors[, -c(1, 2)] <- apply(summary_pivoted_colors[, -c(1, 2)], 2, assign_color)
# Convert the data to long format for plotting
summary_pivoted_long <- tidyr::gather(summary_pivoted_colors, key = "structure", value = "color", -wormID, -SEX)
# Arrange the data by 'SEX' in custom order
summary_pivoted_long <- summary_pivoted_long[order(factor(summary_pivoted_long$SEX, levels = sex_order)), ]
# Plot the graphical table with legend
ggplot(summary_pivoted_long11, aes(x = structure, y = wormID, fill = color)) +
geom_tile(color = "white") +
scale_fill_manual(values = colors, labels = c("Absent", "Present", "Not found")) +
labs(x = "Structure", y = "Worm ID", title = "Graphical Table of Mean Ratio MUCIN") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~SEX, scales = "free_y") +
guides(fill = guide_legend(title = "Color"))
# Plot the graphical table with legend
ggplot(summary_pivoted_long, aes(x = structure, y = wormID, fill = color)) +
geom_tile(color = "white") +
scale_fill_manual(values = colors, labels = c("Absent", "Present", "Not found")) +
labs(x = "Structure", y = "Worm ID", title = "Graphical Table of Mean Ratio MUCIN") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~SEX, scales = "free_y") +
guides(fill = guide_legend(title = "Color"))
# Assuming your dataframe is named "all.counts"
# Calculate ratios of each column divided by '`VASA+`'
all.counts$MUCIN.minus <- all.counts$`VASA+` - all.counts$`MUCIN+`
all.counts$ID13944.minus <- all.counts$`VASA+` - all.counts$`13944+`
all.counts$KCD21.minus <- all.counts$`VASA+` - all.counts$`KCD21+`
all.counts$STEN.minus <- all.counts$`VASA+` - all.counts$`STEN+`
all.counts$ID3252.minus <- all.counts$`VASA+` - all.counts$`3252+`
all.counts$MT11.minus <- all.counts$`VASA+` - all.counts$`MT11+`
all.counts$LEUCIN.minus <- all.counts$`VASA+` - all.counts$`LEUCIN+`
all.counts$DMRT.minus <- all.counts$`VASA+` - all.counts$`DMRT+`
all.counts$PRMI.minus <- all.counts$`VASA+`- all.counts$`PRMI+`
# odds ratios
library(epitools)
library(broom)
# 1. Filter the data to only include rows with "gonial cluster" in the STRUCTURE column
gonial_cluster <- all.counts[all.counts$STRUCTURE == "gonial cluster", ]
# 2. Calculate the total sum for presence and absence of each gene, separated by sex
gene_totals <- data.frame(
Gene = c("MUCIN", "ID13944", "KCD21", "STEN", "ID3252", "MT11", "LEUCIN", "DMRT", "PRMI"),
Male_Presence = sapply(c("MUCIN+", "13944+", "KCD21+", "STEN+", "3252+", "MT11+", "LEUCIN+", "DMRT+", "PRMI+"),
function(x) sum(gonial_cluster[gonial_cluster$SEX == "male", x], na.rm = TRUE)),
Male_Absence = sapply(c("MUCIN.minus", "ID13944.minus", "KCD21.minus", "STEN.minus", "ID3252.minus", "MT11.minus", "LEUCIN.minus", "DMRT.minus", "PRMI.minus"),
function(x) sum(gonial_cluster[gonial_cluster$SEX == "male", x], na.rm = TRUE)),
Female_Presence = sapply(c("MUCIN+", "13944+", "KCD21+", "STEN+", "3252+", "MT11+", "LEUCIN+", "DMRT+", "PRMI+"),
function(x) sum(gonial_cluster[gonial_cluster$SEX == "female", x], na.rm = TRUE)),
Female_Absence = sapply(c("MUCIN.minus", "ID13944.minus", "KCD21.minus", "STEN.minus", "ID3252.minus", "MT11.minus", "LEUCIN.minus", "DMRT.minus", "PRMI.minus"),
function(x) sum(gonial_cluster[gonial_cluster$SEX == "female", x], na.rm = TRUE))
)
write.csv(gene_totals, "/Users/rribeiro/_hcr-counts/odds_gonial_cluster_data.csv", row.names = FALSE)
